Framework :
1. It is set of conceptual structure and guidelines that can be used to build something useful
2. It may include predefined classes and functions that process input, manage hardware services and interact with system.
3. Purpose of framework is to focus on building unique logic of the project rather than writing code from scratch

why to use framework :
1. Collection of tools
2. No need to start from scratch
3. Code reusability
4. Testing
5. Debugging

==========================================================================================

Web Framework :
1. It is used to build web applications.
2. It provides tools and libraries to simplify comman web applications operations. This may include web services, API's, etc.
3. It helps with variety of tasks,from templating, database access to session management and code reuse.

==========================================================================================

Model View Template (MVT) :
1. It is design pattern that separates an application into three main logical components
Model, View and Template.
2. Each components has their own role in project.

Model :
It is responsible to handle database. It is data access layer which handles the data.

View :
1. The user can send the request by interacting with template, the view handles these requests and send it to Model than get appropriate response from Model, sends the response to template.
2. It may also have required logic.
3. It work as mediator between Model and Template.

Template :
1. It represents how the data should be presented to application user. User can read or write the data from template.
2. Basically, it is responsible for showing end user content, or we can say user interface.
3. It consists of HTML, CSS and JS mixed with Django Template Language.

Working of MVT :
1. user sends the request which further hit to urls which is routed to one of the view.
2. view gets executed if request required data from database then view sends request to Model further model interacts with database and get appropriate response from database.
3. Once model gets response (required data) from database than model sends response to view.
4. View will execute all logical part written inside it than to represent it, It will render the template further template will be presented to user.

==========================================================================================

Django :
1. It is free open source python based high-level web framework.
2. It follows MVT architectural design pattern.
3. It is maintain by Django Software Foundation

What we can build using Django :
1. High end web application
2. It encourages rapid development and clean, pragmatic design.
Applications build using django :
Youtube
Instagram
Bitbucket
NASA
Spotify

Advantages of django :
1. Open Source
2. Secure
3. Fast
4. Scalable
5. Provides authentication
6. Provides web development server by default
7. Provides SQLite database by default

==========================================================================================

Django Project:
1. It may contain multiple project applications which means a group of applications and files are called as django project.
2. An application is part of django project

for example :
SchoolProject
    - Registration App
    - Fees App
    - Exam App
    - Attendance App
    - Result App

To create a project:
django-admin startproject projectname

==========================================================================================

Django Project Directory Structure :

schoolproject         --> outer folder/ root directory
    - schoolproject   --> inner project folder
        - __pycache__ --> this folder contain all cache files
        - __init__.py
        - asgi.py
        - settings.py
        - urls.py
        - wsgi.py
    - db.sqlite3      --> database file
    - manage.py


__init__.py :
The folder which contains __init__.py file is considered as python package

wsgi.py :
1. Web server gateway interface work as interface for web server and web application.
2. It provides standard synchronous python apps.
3. When wsgi server loads your application, django needs to import the settings module that's where your entire application is defined.
4. Django use the DJANGO_SETTINGS_MODULE environment variable to locate the appropriate settings module.
5. We can use different value for development and production.
6. If variable isn't set, the default wsgi.py sets it projectname.settings that's how runserver discovers the default settings file.

asgi.py :
1. Asynchronous server gateway interface is successor of wsgi.
2. It work as interface for web server and web application.
3. It provides standard for both asynchronous and synchronous python apps.

settings.py :
This file contains all information and data about project settings.
example : database configuration, templates, installed application, validators, etc

urls.py :
This file contains all information of url attached with applications.

manage.py :
1. It is automatically created in each django project.
2. It is django command line utility and also set DJANGO_SETTINGS_MODULE environment variable so that it points to your project's settings.py file.
3. when working with single django project it is easier to use manage.py than django-admin.

==========================================================================================

How to create application and installed in project :
1. Change directory to root directory : cd schoolproject
2. Create application : python manage.py startapp appname
3. Add/Install application in settings.py file :
    - open settings.py file
    - add appname below in-built apps in INSTALLED_APPS list
    - save settings.py file


==========================================================================================

Application Directory Structure :

course
    - migrations
        - __init__.py
    - __init__.py
    - admin.py
    - apps.py
    - models.py
    - tests.py
    - views.py


migrations :
This folder contains __init__.py file which means it's python package.
It also contains all files which are created after we run makemigration command

__init__.py :
The folder contains __init__.py file is considered as python package

admin.py :
This file is used to register models (sql tables) so we could perform CRUD operations from Admin application.
Admin application is provided by Django to perform CRUD operations.


apps.py :
This file is used for app configuration.

models.py :
This file is used to create our own model classes later these classes will be converted to database tables by Django for our application.

tests.py :
This file is used to create tests.

views.py :
This file is used to create view. we write all business logic code in the file.

==========================================================================================

urls.py :
It is used to define url pattern for view functions of applications.

path() function:
path(route/url,view,kwargs=None,name=None)

route :
the route argument should be string that contains a url pattern.

view :
the view argument is view function or it can be django.urls.include()

kwargs :
It allows to pass additional arguments to view function. It should be dictionary.

name :
the name argument is used for url reversing.

==========================================================================================

How to write view function and map them to urlpattern :

1. Create project : django-admin startproject projectname
2. Go to root directory : cd projectname
3. Create application : python manage.py startapp appname
4. Add/Install application inside INSTALLED_APPS in project's settings.py file.
5. Write view functions inside views.py file (app dictionary)
6. Define url for view function of application :
    - open urls.py (inner project directory)
    - import views module of application
    - write url pattern
    - save urls.py file

==========================================================================================

How to write view function in multiple application and map them to project urlpattern :

1. Create project : django-admin startproject projectname
2. Go to root directory : cd projectname
3. Create application1 : python manage.py startapp appname1
4. Create application2 : python manage.py startapp appname2
5. Add/Install applications inside INSTALLED_APPS in project's settings.py file.
6. Write view functions inside views.py file (app dictionary)
7. Define url for view function of application

NOTE :
drawback of mapping application url in project urls.py :
1. Multiple urls will be mapped inside one project urls.py which will be difficult to handle n number of urls in one place.
2. Need to manage imports of application view function
3. Problem of application reusability

==========================================================================================

How to create templates folder and template files :

1. Create project : django-admin startproject projectname
2. Go to root directory : cd projectname
3. Create application1 : python manage.py startapp appname1
4. Create application2 : python manage.py startapp appname2
5. Add/Install applications inside INSTALLED_APPS in project's settings.py file.
6. Create templates folder inside root dictionary
7. Create TEMPLATES_DIR variable inside settings.py and assign (BASE_DIR / 'templates') value in it.
8. Write view functions inside views.py file (app dictionary)
    - use render() function to send HttpResponse object
    - syntax : render(request,template_name,context,content_type,status,using)
9. Define url for view function of application
10. Create template files inside templates folder and write html code for representation.

==========================================================================================

How to create templates folder and render template files in each separate sub directory:

1. Create project : django-admin startproject projectname
2. Go to root directory : cd projectname
3. Create application1 : python manage.py startapp appname1
4. Create application2 : python manage.py startapp appname2
5. Add/Install applications inside INSTALLED_APPS in project's settings.py file.
6. Create templates folder inside root dictionary
7. Create separate sub folders for each application inside templates folder.
8. Create TEMPLATES_DIR variable inside settings.py and assign (BASE_DIR / 'templates') value in it.
9. Write view functions inside views.py file (app directory)
    - use render() function to send HttpResponse object
    - syntax : render(request,path/template_name,context,content_type,status,using)
10. Define url for view function of application
11. Create template files inside templates folder and write html code for representation.

==========================================================================================